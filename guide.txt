This guide will walk students through making a full stack application while reviewing some isolated key concepts.

Students should focus on...
    1) Handling requests on the back end.
        a. What does it mean to handle a request?
            i. Endpoint gets hit.
            ii. Back end processes some sort of business logic.
            iii. Back end sends a response to the front end.
    2) Sending requests from the front end.
        a. How does the front end communicate with the back end?
            i. Matching URLs and CRUD methods (GET, POST, PUT, DELETE).
            ii. Asynchronous functionality
                - The order of how requests get sent from the front end, how it gets processed in the back end, and is received in .then().
                - The restaurant analogy (SEE BELOW).
    3) What can you do with a response from the back end?
        a. Rendering info with HTML.
        b. Logging it.
    4) Params, body, etc.

RESTAURANT ANALOGY (or any other analogy)
A full stack application is like a restaurant. The front end is the diner, Axios is the waiter, the kitchen is the back end. The diner is blind to everything the kitchen is doing to prepare their order. The diner only needs to request something from the kitchen. The waiter will be their primary communication method to the kitchen, because the diner won't visit the kitchen themselves to place the order. Once the kitchen gets the order, they will process your order and send your dish back via your waiter.

1. SERVER SETUP

Use the boilerplate code and write it out step by step for the review (avoid copy pasting it, this might be their last time writing it out step by step).

    const express = require("express");
    const cors = require("cors");
    const app = express();

    app.use(cors());
    app.use(express.json());

    app.listen(3434, () => {
        console.log("We are running on 3434");
    });

Start the server, and make sure students know that checking their VS Code terminals is a good first step for debugging.

2. WRITE A GET REQUEST

Start with a basic GET request that sends back a simple string.
    1) On the front end, make a basic button that sends a request, using the "3 Basic Steps for Successful Interactive JS".
        a. Grab the element.
        b. Write its functionality.
        c. Attach the functionality to the element.
    2) On the back end, receive the request and send back a 200 status with the string "Request handled".
    3) On the front end, log it or render it using HTML, if you have time.

Don't do any CSS or try to make anything pretty. This is not an assessment to test how well you can style.

FRONT END
    const testButton = document.querySelector("#test-button");

    const testFunc() {
        axios.get("http://localhost:3434/test")
            .then((res) => {
                console.log(res.data) // Feel free to log res as well, to show them how the response object is structured.
            })
    }

    testButton.addEventListener("click", testFunc);

BACK END
    app.get("/test", (req, res) => {
        res.status(200).send("Request handled");
    })

3. HOW TO SEND A BODY

Body is just an object you send to the back end.

FRONT END
    const bodyFunc() {
        let bodyObj = {
            name: "Jeddy",
            hobbies: "Coding"
        }

        axios.post("/add", bodyObj)
            .then((res) => {
                console.log(res.data);
            })
    }

BACK END
    app.post("/add", (req, res) => {
        console.log(req.body);
        const {name, hobbies} = req.body;

        res.status(200).send(`The body you sent contains ${name} and ${hobbies}`);
    })

4. HOW TO SEND A PARAM

Param is a way to specifically identify/request something from the back end.

FRONT END
    const inputElement = document.querySelector("#input-element");
    const paramButton = document.querySelector("#param-buton");

    const paramFunc() {
        const id = inputElement.value;

        axios.get("/get/${id}")
            .then((res) => {
                console.log(res.data);
            })
    }

    paramButton.addEventListener("click", paramFunc);

BACK END
    app.get("/get/:id", (req, res) => {
        console.log(req.params);
        console.log(req.params.id);
        
        res.status(200).send(`The param you sent was ${req.params.id}`);
    })